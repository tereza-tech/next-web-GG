import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { Image, Title, Group, ActionIcon, Button, MantineProvider , Text} from '@mantine/core'
import { HeroBullets } from '../components/u3/slideComponent'
import { HeaderResponsive } from '../components/u3/headerComponent'
import Links from '../api/links.json'
import Grid_data from '../api/grid.json'
import stats from '../api/stats.json'
import authors from '../api/authors.json'

const Home: NextPage = () => {
  return (
    <div className={styles.container}>
      
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
          <HeaderResponsive></HeaderResponsive>
       <HeroBullets></HeroBullets>
      
      </main>
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}


export default Home


export function Myanimation() {
    let canvas = document.getElementsByTagName('canvas')[0];
    canvas.width = document.body.clientWidth;
    canvas.height = document.body.clientHeight;
    
    var ctx = canvas.getContext('2d');
    
    
    
    /*Modify options here*/
    
    //possible characters that will appear
    var characterList = ['y', 'z'];
    
    //stocks possible character attributes
    var layers = {
        n: 2, //number of layers
        letters: [10, 20, 100, 40, 30, 20, 10], //letters per layer (starting from the deepest layer)
        coef: [0.1, 0.2, 0.4, 0.6, 0.8], //how much the letters move from the mouse (starting from the deepest layer)
        size: [16, 22, 36, 40, 46], //font size of the letters (starting from the deepest layer)
        color: ['#fff', '#eee', '#ccc', '#bbb', '#aaa'], //color of the letters (starting from the deepest layer)
        font: 'Courier' //font family (of every layer)
    };
    
    /*End of options*/
    
    
    
    var characters:any = [];
    var mouseX = document.body.clientWidth/2;
    var mouseY = document.body.clientHeight/2;
    
    var rnd = {
        btwn: function(min:any, max:any) {
            return Math.floor(Math.random() * (max - min) + min);
        },
        choose: function(list:any) {
            return list[rnd.btwn(0, list.length)];
        }
    };
    
    
    
    /*LETTER DRAWING*/
    
    function drawLetter(char:any) {
        /* @ts-ignore */
        ctx.font = char.size + 'px ' + char.font;
        /* @ts-ignore */
        ctx.fillStyle = char.color;
        
        var x = char.posX + (mouseX-canvas.width/2)*char.coef;
        var y = char.posY + (mouseY-canvas.height/2)*char.coef;
    /* @ts-ignore */
        ctx.fillText(char.char, x, y);
    }
    
    
    
    /*ANIMATION*/
    
    document.onmousemove = function(ev) {
        mouseX = ev.pageX - canvas.offsetLeft;
        mouseY = ev.pageY - canvas.offsetTop;
    
        if (window.requestAnimationFrame !== undefined) {
            requestAnimationFrame(update);
        } else {
            update();
        }
    };
    
    function update() {
        clear();
        render();
    }
    
    function clear() {
        /* @ts-ignore */
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    }
    
    function render() {
        for (var i = 0; i < characters.length; i++) {
            drawLetter(characters[i]);
        }
    }
    
    
    
    /*INITIALIZE*/
    
    function createLetters() {
        for (var i = 0; i < layers.n; i++) {
            for (var j = 0; j < layers.letters[i]; j++) {
    
                var character = rnd.choose(characterList);
                var x = rnd.btwn(0, canvas.width);
                var y = rnd.btwn(0, canvas.height);
    
                characters.push({
                    char: character,
                    font: layers.font,
                    size: layers.size[i],
                    color: layers.color[i],
                    layer: i,
                    coef: layers.coef[i],
                    posX: x,
                    posY: y
                });
    
            }
        }
    }
    
    createLetters();
    update();
    
    
    
    /*REAJUST CANVAS AFTER RESIZE*/
    
    window.onresize = function() {
        location.reload();
    };
    /* @ts-ignore */
    document.getElementById('close').onclick = function() {
        /* @ts-ignore */
        this.parentElement.style.visibility = 'hidden';
        /* @ts-ignore */
        this.parentElement.style.opacity = '0';
    }
}


const redirectToLink = (link: string): void => {
  window.open(link, '_blank');
};